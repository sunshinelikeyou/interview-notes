import{_ as l,D as e,c as h,j as s,a as i,I as t,a4 as n,o as p}from"./chunks/framework.DUvUKmhD.js";const vs=JSON.parse('{"title":"Javascript Part","description":"","frontmatter":{},"headers":[],"relativePath":"src/javascript.md","filePath":"src/javascript.md"}'),d={name:"src/javascript.md"},r=s("h1",{id:"javascript-part",tabindex:"-1"},[i("Javascript Part "),s("a",{class:"header-anchor",href:"#javascript-part","aria-label":'Permalink to "Javascript Part"'},"​")],-1),k={class:"table-of-contents"},E={href:"#js数据类型有哪些-都存储在内存的什么位置"},o={href:"#如何判断数据类型-有何区别"},c={href:"#数组的常用方法有哪些-改变原数组的有哪些"},y={href:"#如何实现数组去重-如何实现数组扁平化"},g={href:"#常见的数组排序方法有哪些-各自的时间复杂度是多少"},b={href:"#手写一个对象的深拷贝方法-考虑循环引用-栈溢出的情况"},_={href:"#树-数组数据格式互相转换"},m={href:"#路由模式history-hash模式的区别-原理-实现方式"},u={href:"#call-apply-bind-的作用-手写一个call方法"},F={href:"#什么是防抖-什么是节流-有何区别-如何实现一个函数节流-函数防抖"},C={href:"#什么是事件循环-宏任务和微任务-事件循环的执行顺序"},A={href:"#什么是闭包-闭包的优缺点-使用场景"},x={href:"#什么是原型-原型链是如何产生的-原型链的查找机制"},B={href:"#js的继承方式有哪些-如何实现继承"},D={href:"#如何实现大文件上传-如何实现分片上传-如何实现断点续传"},f={href:"#如何实现几百万条数据的高性能渲染"},w={id:"js数据类型有哪些-都存储在内存的什么位置",tabindex:"-1"},j=s("a",{class:"header-anchor",href:"#js数据类型有哪些-都存储在内存的什么位置","aria-label":'Permalink to "js数据类型有哪些？都存储在内存的什么位置？ <Badge type="tip" text="primary" />"'},"​",-1),v=n('<details class="details custom-block"><summary>answer</summary><table tabindex="0"><thead><tr><th>数据类型</th><th>类型</th><th>存储位置</th></tr></thead><tbody><tr><td>基本类型</td><td>Number（-2^53 ~ 2^53）、String、Boolean、Null、Undefined、Sybmol、BigInt</td><td>栈</td></tr><tr><td>引用类型</td><td>Object(Function Array Date RegExp)</td><td>数据在堆，引用在栈</td></tr></tbody></table></details>',1),T={id:"如何判断数据类型-有何区别",tabindex:"-1"},P=s("a",{class:"header-anchor",href:"#如何判断数据类型-有何区别","aria-label":'Permalink to "如何判断数据类型，有何区别 <Badge type="tip" text="primary" />"'},"​",-1),S=n('<details class="details custom-block"><summary>answer</summary><table tabindex="0"><thead><tr><th>方式</th><th>区别</th></tr></thead><tbody><tr><td>typeof</td><td>返回值有string、number、boolean、undefined、function、object、symbol,只能判断基本类型和函数，null和引用类型都返回object</td></tr><tr><td>instanceof</td><td>返回值有Boolean 检查一个对象是否是某个特定类的实例，适用于检测自定义类的实例</td></tr><tr><td>Object.prototype.toString.call(obj)</td><td>返回值有[object Object]、[object Array]、[object Date]、[object RegExp]、[object Function]、[object Boolean]、[object Number]、[object String]、[object Symbol] 可以判断引用类型的具体类型</td></tr></tbody></table></details>',1),N={id:"数组的常用方法有哪些-改变原数组的有哪些",tabindex:"-1"},I=s("a",{class:"header-anchor",href:"#数组的常用方法有哪些-改变原数组的有哪些","aria-label":'Permalink to "数组的常用方法有哪些，改变原数组的有哪些 <Badge type="tip" text="primary" />"'},"​",-1),V=n('<details class="details custom-block"><summary>answer</summary><table tabindex="0"><thead><tr><th>方法</th><th>用法</th><th>是否改变原数组</th><th>返回值</th></tr></thead><tbody><tr><td>push</td><td>尾加</td><td>是</td><td>新数组长度</td></tr><tr><td>unshift</td><td>头加</td><td>是</td><td>新数组长度</td></tr><tr><td>pop</td><td>尾减</td><td>是</td><td>删除的元素</td></tr><tr><td>shift</td><td>头减</td><td>是</td><td>删除的元素</td></tr><tr><td>splice</td><td>增删</td><td>是</td><td>删除的元素</td></tr><tr><td>sort</td><td>排序</td><td>是</td><td>排序后的数组</td></tr><tr><td>reverse</td><td>倒序</td><td>是</td><td>反转后的数组</td></tr><tr><td>concat</td><td>合并</td><td>否</td><td>新数组</td></tr><tr><td>slice</td><td>剪切</td><td>否</td><td>新数组</td></tr><tr><td>map</td><td>派生</td><td>否</td><td>新数组</td></tr><tr><td>filter</td><td>过滤</td><td>否</td><td>新数组</td></tr><tr><td>forEach</td><td>循环</td><td>否</td><td>undefined</td></tr><tr><td>every</td><td>全满足条件</td><td>否</td><td>Boolean</td></tr><tr><td>some</td><td>有满足条件</td><td>否</td><td>Boolean</td></tr><tr><td>find</td><td>查找某项</td><td>否</td><td>找到的元素</td></tr><tr><td>findIndex</td><td>查找某项下标</td><td>否</td><td>找到的元素下标</td></tr><tr><td>reduce</td><td>累积操作</td><td>否</td><td>设置的初始值类型</td></tr></tbody></table></details>',1),q={id:"如何实现数组去重-如何实现数组扁平化",tabindex:"-1"},R=s("a",{class:"header-anchor",href:"#如何实现数组去重-如何实现数组扁平化","aria-label":'Permalink to "如何实现数组去重，如何实现数组扁平化？ <Badge type="tip" text="primary" />"'},"​",-1),J=n(`<details class="details custom-block"><summary>answer</summary><blockquote><p>数组去重</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 基本类型数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newArr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr)];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 引用类型数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [{id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},{id:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},{id:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},{id:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// let newArr = [...new Set(arr.map((item)=&gt;JSON.stringify(item)))].map((item)=&gt;JSON.parse(item));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newArr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    prev.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next.id) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prev.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(next);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prev;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},[]);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [{id: 1,name: &#39;a&#39;},{id:2,name: &#39;b&#39;},{id:3,name: &#39;c&#39;}]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>数组扁平化</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],[[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 系统方法  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// let newArr = arr.flat(Infinity);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> flatten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        prev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(next) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prev.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(next)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prev.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(next);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prev;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },[])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [1, 2, 3, 4, 5]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></details>`,1),O={id:"常见的数组排序方法有哪些-各自的时间复杂度是多少",tabindex:"-1"},$=s("a",{class:"header-anchor",href:"#常见的数组排序方法有哪些-各自的时间复杂度是多少","aria-label":'Permalink to "常见的数组排序方法有哪些，各自的时间复杂度是多少 <Badge type="warning" text="middle" />"'},"​",-1),U=n(`<details class="details custom-block"><summary>answer</summary><blockquote><p>冒泡排序</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                [arr[j], arr[j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [arr[j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], arr[j]];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [1, 2, 3, 4, 5]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><blockquote><p>快速排序<br> 插入排序<br> 选择排序<br> 希尔排序<br> 归并排序<br> 堆排序</p></blockquote></details>`,1),z={id:"手写一个对象的深拷贝方法-考虑循环引用-栈溢出的情况",tabindex:"-1"},G=s("a",{class:"header-anchor",href:"#手写一个对象的深拷贝方法-考虑循环引用-栈溢出的情况","aria-label":'Permalink to "手写一个对象的深拷贝方法，考虑循环引用，栈溢出的情况 <Badge type="warning" text="middle" />"'},"​",-1),H=s("details",{class:"details custom-block"},[s("summary",null,"answer"),s("p",null,"This is a details block.")],-1),K={id:"树-数组数据格式互相转换",tabindex:"-1"},L=s("a",{class:"header-anchor",href:"#树-数组数据格式互相转换","aria-label":'Permalink to "树，数组数据格式互相转换 <Badge type="warning" text="middle" />"'},"​",-1),M=s("details",{class:"details custom-block"},[s("summary",null,"answer"),s("p",null,"This is a details block.")],-1),Q={id:"路由模式history-hash模式的区别-原理-实现方式",tabindex:"-1"},W=s("a",{class:"header-anchor",href:"#路由模式history-hash模式的区别-原理-实现方式","aria-label":'Permalink to "路由模式history，hash模式的区别，原理，实现方式 <Badge type="warning" text="middle" />"'},"​",-1),X=s("details",{class:"details custom-block"},[s("summary",null,"answer"),s("p",null,"This is a details block.")],-1),Y={id:"call-apply-bind-的作用-手写一个call方法",tabindex:"-1"},Z=s("a",{class:"header-anchor",href:"#call-apply-bind-的作用-手写一个call方法","aria-label":'Permalink to "call,apply,bind 的作用，手写一个call方法 <Badge type="warning" text="middle" />"'},"​",-1),ss=s("details",{class:"details custom-block"},[s("summary",null,"answer"),s("p",null,"This is a details block.")],-1),is={id:"什么是防抖-什么是节流-有何区别-如何实现一个函数节流-函数防抖",tabindex:"-1"},as=s("a",{class:"header-anchor",href:"#什么是防抖-什么是节流-有何区别-如何实现一个函数节流-函数防抖","aria-label":'Permalink to "什么是防抖，什么是节流，有何区别，如何实现一个函数节流，函数防抖 <Badge type="warning" text="middle" />"'},"​",-1),ts=s("details",{class:"details custom-block"},[s("summary",null,"answer"),s("p",null,"This is a details block.")],-1),ns={id:"什么是事件循环-宏任务和微任务-事件循环的执行顺序",tabindex:"-1"},ls=s("a",{class:"header-anchor",href:"#什么是事件循环-宏任务和微任务-事件循环的执行顺序","aria-label":'Permalink to "什么是事件循环，宏任务和微任务，事件循环的执行顺序 <Badge type="warning" text="middle" />"'},"​",-1),es=s("details",{class:"details custom-block"},[s("summary",null,"answer"),s("p",null,"This is a details block.")],-1),hs={id:"什么是闭包-闭包的优缺点-使用场景",tabindex:"-1"},ps=s("a",{class:"header-anchor",href:"#什么是闭包-闭包的优缺点-使用场景","aria-label":'Permalink to "什么是闭包，闭包的优缺点，使用场景 <Badge type="warning" text="middle" />"'},"​",-1),ds=s("details",{class:"details custom-block"},[s("summary",null,"answer"),s("p",null,"This is a details block.")],-1),rs={id:"什么是原型-原型链是如何产生的-原型链的查找机制",tabindex:"-1"},ks=s("a",{class:"header-anchor",href:"#什么是原型-原型链是如何产生的-原型链的查找机制","aria-label":'Permalink to "什么是原型，原型链是如何产生的，原型链的查找机制  <Badge type="warning" text="middle" />"'},"​",-1),Es=s("details",{class:"details custom-block"},[s("summary",null,"answer"),s("p",null,"This is a details block.")],-1),os={id:"js的继承方式有哪些-如何实现继承",tabindex:"-1"},cs=s("a",{class:"header-anchor",href:"#js的继承方式有哪些-如何实现继承","aria-label":'Permalink to "js的继承方式有哪些，如何实现继承 <Badge type="warning" text="middle" />"'},"​",-1),ys=s("details",{class:"details custom-block"},[s("summary",null,"answer"),s("p",null,"This is a details block.")],-1),gs={id:"如何实现大文件上传-如何实现分片上传-如何实现断点续传",tabindex:"-1"},bs=s("a",{class:"header-anchor",href:"#如何实现大文件上传-如何实现分片上传-如何实现断点续传","aria-label":'Permalink to "如何实现大文件上传，如何实现分片上传,如何实现断点续传 <Badge type="danger" text="senior" />"'},"​",-1),_s=s("details",{class:"details custom-block"},[s("summary",null,"answer"),s("p",null,"This is a details block.")],-1),ms={id:"如何实现几百万条数据的高性能渲染",tabindex:"-1"},us=s("a",{class:"header-anchor",href:"#如何实现几百万条数据的高性能渲染","aria-label":'Permalink to "如何实现几百万条数据的高性能渲染 <Badge type="danger" text="senior" />"'},"​",-1),Fs=s("details",{class:"details custom-block"},[s("summary",null,"answer"),s("p",null,"This is a details block.")],-1);function Cs(As,xs,Bs,Ds,fs,ws){const a=e("Badge");return p(),h("div",null,[r,s("nav",k,[s("ul",null,[s("li",null,[s("a",E,[i("js数据类型有哪些？都存储在内存的什么位置？ "),t(a,{type:"tip",text:"primary"})])]),s("li",null,[s("a",o,[i("如何判断数据类型，有何区别 "),t(a,{type:"tip",text:"primary"})])]),s("li",null,[s("a",c,[i("数组的常用方法有哪些，改变原数组的有哪些 "),t(a,{type:"tip",text:"primary"})])]),s("li",null,[s("a",y,[i("如何实现数组去重，如何实现数组扁平化？ "),t(a,{type:"tip",text:"primary"})])]),s("li",null,[s("a",g,[i("常见的数组排序方法有哪些，各自的时间复杂度是多少 "),t(a,{type:"warning",text:"middle"})])]),s("li",null,[s("a",b,[i("手写一个对象的深拷贝方法，考虑循环引用，栈溢出的情况 "),t(a,{type:"warning",text:"middle"})])]),s("li",null,[s("a",_,[i("树，数组数据格式互相转换 "),t(a,{type:"warning",text:"middle"})])]),s("li",null,[s("a",m,[i("路由模式history，hash模式的区别，原理，实现方式 "),t(a,{type:"warning",text:"middle"})])]),s("li",null,[s("a",u,[i("call,apply,bind 的作用，手写一个call方法 "),t(a,{type:"warning",text:"middle"})])]),s("li",null,[s("a",F,[i("什么是防抖，什么是节流，有何区别，如何实现一个函数节流，函数防抖 "),t(a,{type:"warning",text:"middle"})])]),s("li",null,[s("a",C,[i("什么是事件循环，宏任务和微任务，事件循环的执行顺序 "),t(a,{type:"warning",text:"middle"})])]),s("li",null,[s("a",A,[i("什么是闭包，闭包的优缺点，使用场景 "),t(a,{type:"warning",text:"middle"})])]),s("li",null,[s("a",x,[i("什么是原型，原型链是如何产生的，原型链的查找机制 "),t(a,{type:"warning",text:"middle"})])]),s("li",null,[s("a",B,[i("js的继承方式有哪些，如何实现继承 "),t(a,{type:"warning",text:"middle"})])]),s("li",null,[s("a",D,[i("如何实现大文件上传，如何实现分片上传,如何实现断点续传 "),t(a,{type:"danger",text:"senior"})])]),s("li",null,[s("a",f,[i("如何实现几百万条数据的高性能渲染 "),t(a,{type:"danger",text:"senior"})])])])]),s("h2",w,[i("js数据类型有哪些？都存储在内存的什么位置？ "),t(a,{type:"tip",text:"primary"}),i(),j]),v,s("h2",T,[i("如何判断数据类型，有何区别 "),t(a,{type:"tip",text:"primary"}),i(),P]),S,s("h2",N,[i("数组的常用方法有哪些，改变原数组的有哪些 "),t(a,{type:"tip",text:"primary"}),i(),I]),V,s("h2",q,[i("如何实现数组去重，如何实现数组扁平化？ "),t(a,{type:"tip",text:"primary"}),i(),R]),J,s("h2",O,[i("常见的数组排序方法有哪些，各自的时间复杂度是多少 "),t(a,{type:"warning",text:"middle"}),i(),$]),U,s("h2",z,[i("手写一个对象的深拷贝方法，考虑循环引用，栈溢出的情况 "),t(a,{type:"warning",text:"middle"}),i(),G]),H,s("h2",K,[i("树，数组数据格式互相转换 "),t(a,{type:"warning",text:"middle"}),i(),L]),M,s("h2",Q,[i("路由模式history，hash模式的区别，原理，实现方式 "),t(a,{type:"warning",text:"middle"}),i(),W]),X,s("h2",Y,[i("call,apply,bind 的作用，手写一个call方法 "),t(a,{type:"warning",text:"middle"}),i(),Z]),ss,s("h2",is,[i("什么是防抖，什么是节流，有何区别，如何实现一个函数节流，函数防抖 "),t(a,{type:"warning",text:"middle"}),i(),as]),ts,s("h2",ns,[i("什么是事件循环，宏任务和微任务，事件循环的执行顺序 "),t(a,{type:"warning",text:"middle"}),i(),ls]),es,s("h2",hs,[i("什么是闭包，闭包的优缺点，使用场景 "),t(a,{type:"warning",text:"middle"}),i(),ps]),ds,s("h2",rs,[i("什么是原型，原型链是如何产生的，原型链的查找机制 "),t(a,{type:"warning",text:"middle"}),i(),ks]),Es,s("h2",os,[i("js的继承方式有哪些，如何实现继承 "),t(a,{type:"warning",text:"middle"}),i(),cs]),ys,s("h2",gs,[i("如何实现大文件上传，如何实现分片上传,如何实现断点续传 "),t(a,{type:"danger",text:"senior"}),i(),bs]),_s,s("h2",ms,[i("如何实现几百万条数据的高性能渲染 "),t(a,{type:"danger",text:"senior"}),i(),us]),Fs])}const Ts=l(d,[["render",Cs]]);export{vs as __pageData,Ts as default};
