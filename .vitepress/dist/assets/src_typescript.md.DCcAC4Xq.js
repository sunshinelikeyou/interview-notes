import{_ as e,D as l,c as p,j as s,a as i,I as t,a4 as n,o as h}from"./chunks/framework.uym2WrGe.js";const w=JSON.parse('{"title":"TypeScript Part","description":"","frontmatter":{},"headers":[],"relativePath":"src/typescript.md","filePath":"src/typescript.md","lastUpdated":1724913643000}'),r={name:"src/typescript.md"},k=s("h1",{id:"typescript-part",tabindex:"-1"},[i("TypeScript Part "),s("a",{class:"header-anchor",href:"#typescript-part","aria-label":'Permalink to "TypeScript Part"'},"​")],-1),d={class:"table-of-contents"},c={href:"#ts中type-和-interface-的区别"},y={href:"#ts中const和readonly的区别是什么"},E={href:"#ts中的类型有哪些"},o={href:"#ts中的协变-covariance-逆变-contravariance-双变-bivariance-和抗变-invariance-是什么"},g={id:"ts中type-和-interface-的区别",tabindex:"-1"},b=s("a",{class:"header-anchor",href:"#ts中type-和-interface-的区别","aria-label":'Permalink to "ts中type 和 interface 的区别？ <Badge type="tip" text="primary" />"'},"​",-1),F=n('<details class="details custom-block"><summary>回答</summary><table tabindex="0"><thead><tr><th>名称</th><th>区别</th></tr></thead><tbody><tr><td>type</td><td>可以定义原始值、联合类型、交叉类型，元组等类型，重复定义同一个名称的类型会报错，只能通过&amp;进行合并</td></tr><tr><td>interface</td><td>定义对象、类，函数的类型，重复定义同一个名称的interface时，会合并其属性，通过extends拓展</td></tr></tbody></table><blockquote><p>一般来说，如果不清楚什么时候用interface/type，能用 interface 实现，就用 interface , 如果不能就用 type 。</p></blockquote></details>',1),u={id:"ts中const和readonly的区别是什么",tabindex:"-1"},m=s("a",{class:"header-anchor",href:"#ts中const和readonly的区别是什么","aria-label":'Permalink to "ts中const和readonly的区别是什么？ <Badge type="tip" text="primary" />"'},"​",-1),_=n('<details class="details custom-block"><summary>回答</summary><table tabindex="0"><thead><tr><th>名称</th><th>使用场景</th><th>检查时机</th><th>区别</th></tr></thead><tbody><tr><td>const</td><td>用于变量声明</td><td>运行时</td><td>const变量保存的数组，可以使用push，pop等方法</td></tr><tr><td>readonly</td><td>用于属性声明</td><td>编译时</td><td>使用ReadonlyArray声明的数组不能使用push，pop等方法</td></tr></tbody></table></details>',1),A={id:"ts中的类型有哪些",tabindex:"-1"},C=s("a",{class:"header-anchor",href:"#ts中的类型有哪些","aria-label":'Permalink to "ts中的类型有哪些？ <Badge type="tip" text="primary" />"'},"​",-1),B=n('<details class="details custom-block"><summary>回答</summary><table tabindex="0"><thead><tr><th>分类</th><th>类型</th></tr></thead><tbody><tr><td>基本类型</td><td>number, string, boolean, null, undefined</td></tr><tr><td>引用类型</td><td>object(非原始类型的对象), array, tuple（元组）, enum</td></tr><tr><td>特殊类型</td><td>any(任意类型), void（没有任何类型，通常表示函数没有返回）, never（永不存在的值的类型）, unknown（位置类型）</td></tr><tr><td>自定义类型</td><td>type aliases, interface, interaction types, union types</td></tr></tbody></table></details>',1),D={id:"ts中的协变-covariance-逆变-contravariance-双变-bivariance-和抗变-invariance-是什么",tabindex:"-1"},v=s("a",{class:"header-anchor",href:"#ts中的协变-covariance-逆变-contravariance-双变-bivariance-和抗变-invariance-是什么","aria-label":'Permalink to "ts中的协变（Covariance），逆变（Contravariance），双变（Bivariance）和抗变（Invariance ）是什么？ <Badge type="warning" text="middle" />"'},"​",-1),f=n(`<details class="details custom-block"><summary>回答</summary><table tabindex="0"><thead><tr><th>名称</th><th>区别</th><th>应用场景</th></tr></thead><tbody><tr><td>协变</td><td>协变意味着子类型可以赋值给父类型</td><td>数组类型是协变的，因此可以将子类型的数组赋值给父类型的数组</td></tr><tr><td>逆变</td><td>逆变意味着超类型可以赋值给子类型</td><td>函数参数类型是逆变的，因此可以将超类型的函数赋值给子类型的函数</td></tr><tr><td>双变</td><td>协变和逆变的结合，既可以是子类型赋值给父类型，也可以是父类型赋值给子类型</td><td>对象类型是双变的，这意味着可以将子类型的对象赋值给父类型的对象，同时也可以将超类型的对象赋值给子类型的对象， ts2.x 之前支持</td></tr><tr><td>抗变</td><td>抗变表示不允许类型之间的任何赋值关系</td><td>通常情况下，基本类型和类类型是抗变的</td></tr></tbody></table><blockquote><p>协变</p></blockquote><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Guang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    hobbies</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zhangsan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> guang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Guang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;lisi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hobbies: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;music&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;reading&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> guang; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 协变，子类型可以赋值给父类型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// guang = person; 报错类型 &quot;Person&quot; 中缺少属性 &quot;hobbies&quot;，但类型 &quot;Guang&quot; 中需要该属性。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;b&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;b&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;c&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true, 联合类型是集合那一套，看子集、父集，非联合类型就是看结构</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><blockquote><p>逆变</p></blockquote><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printHobbies</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">guang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Guang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printHobbies</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">guang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(guang.hobbies);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(person.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">printHobbies </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> printName;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">printName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> printHobbies;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 报错类型“(guang: Guang) =&gt; void”的参数不能赋给类型“(person: Person) =&gt; void”的参数。 ，如果这个也能支持就是双变</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></details>`,1);function x(T,P,S,N,q,I){const a=l("Badge");return h(),p("div",null,[k,s("nav",d,[s("ul",null,[s("li",null,[s("a",c,[i("ts中type 和 interface 的区别？ "),t(a,{type:"tip",text:"primary"})])]),s("li",null,[s("a",y,[i("ts中const和readonly的区别是什么？ "),t(a,{type:"tip",text:"primary"})])]),s("li",null,[s("a",E,[i("ts中的类型有哪些？ "),t(a,{type:"tip",text:"primary"})])]),s("li",null,[s("a",o,[i("ts中的协变（Covariance），逆变（Contravariance），双变（Bivariance）和抗变（Invariance ）是什么？ "),t(a,{type:"warning",text:"middle"})])])])]),s("h2",g,[i("ts中type 和 interface 的区别？ "),t(a,{type:"tip",text:"primary"}),i(),b]),F,s("h2",u,[i("ts中const和readonly的区别是什么？ "),t(a,{type:"tip",text:"primary"}),i(),m]),_,s("h2",A,[i("ts中的类型有哪些？ "),t(a,{type:"tip",text:"primary"}),i(),C]),B,s("h2",D,[i("ts中的协变（Covariance），逆变（Contravariance），双变（Bivariance）和抗变（Invariance ）是什么？ "),t(a,{type:"warning",text:"middle"}),i(),v]),f])}const G=e(r,[["render",x]]);export{w as __pageData,G as default};
